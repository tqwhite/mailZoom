'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'app',
				optional: false
			},
			{
				name: 'router',
				optional: false
			},
			{
				name: 'userAccess',
				optional: false
			},
			{
				name: 'mzPassportSecret',
				optional: false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};

	//LOCAL FUNCTIONS ====================================

	//METHODS AND PROPERTIES ====================================
	var passport = require('passport');
	var LocalStrategy = require('passport-local').Strategy;

	// app.use(require('serve-static')(__dirname + '/../../public'));
	self.app.use(require('cookie-parser')());
	// ADDED to app in calling module: app.use(require('body-parser').urlencoded({ extended: true }));
	self.app.use(require('express-session')({
		secret: self.mzPassportSecret,
		resave: true,
		saveUninitialized: true
	}));
	self.app.use(passport.initialize());
	self.app.use(passport.session());

	var localStrategy = new LocalStrategy({
		usernameField: 'userName',
		passwordField: 'password',
		//		passReqToCallback:true
	}, function(userName, password, done) {
	
		self.userAccess.authenticate({userName:userName, password:password}, done);

	});

	passport.use(localStrategy);

	passport.serializeUser(function(user, done) {
		// please read the Passport documentation on how to implement this. We're now
		// just serializing the entire 'user' object. It would be more sane to serialize
		// just the unique user-id, so you can retrieve the user object from the database
		// in .deserializeUser().

		done(null, user.userName);
	});

	passport.deserializeUser(function(userName, done) {
		self.userAccess.getUser(userName, 'lean', done);
	});

	//INITIALIZATION ====================================

	this.app.use('/', this.router);

	// app.post('/login', 
	//   passport.authenticate('local', { failureRedirect: '/login' }),
	//   function(req, res) {
	//     res.redirect('/');
	//   });

	this.router.post('/register', function(req, res) {
		self.userAccess.registerUser(req.body, function(err, result) {

			if (!err) {
				res.status('201').send("Created Registration: " + result.displayName);
			} else {
				res.status('403').send(err.message);
			}
		});

	});

	this.router.put('/login',
	passport.authenticate('local'), function(req, res, next) {
		res.status('200').send({
			user: req.user
		});
		return

	}
	);
	this.router.get('/getCookieUserInfo',function(req, res, next) {
		res.status('200').send({
			user: req.user
		});
		return
	});
	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;

