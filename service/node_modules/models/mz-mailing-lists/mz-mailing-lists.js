'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');
var mongoose = require('mongoose');
var Schema = mongoose.Schema;

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'mzMongoUrl',
				optional: false
			},
			{
				name: 'databaseName',
				optional: false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//SETUP ====================================


	var dataModel = function() {
		//thanks: https://scotch.io/tutorials/using-mongoosejs-in-node-js-and-mongodb-applications

		var modelName = 'MailingList';

		var schema = new Schema({
			title: {
				type: String,
				unique: true
			},
			ownerEmailAdr: {
				type: String,
				required: true,
				unique: true
			},
			recipients: [
				{
					emailAdr: String
				}
			],
			created_at: {
				type: Date,
				default: Date.now
			},
			updated_at: {
				type: Date,
				default: Date.now
			}
		});


		schema.methods.formatInfoString = function() {
			this.password = this.password; //right now, plain text is good

			return this.displayName + '/' + this.userName + '/' + this.emailAdr;
		};

		// schema.pre('save', function(next){
		//   this.password = this.password; //should be hash but right now, plain text is good
		//   this.updated_at=new Date();
		//   next();
		// });
		return self.db.model(modelName, schema);
	};

	//LOCAL FUNCTIONS ====================================
	var initDb = function() {
		self.db = mongoose.createConnection(self.mzMongoUrl + self.databaseName);
		self.db.on('error', function(err) {
			throw ("mz-user says, mongoose failed")
		});
	}
	var printError = function(err, result, extraFunction) {
		qtools.dump({
			err: err
		});
	}
	var wrapCallback = function(callback) {
		return function(err, result) {
			if (typeof (extraFunction) == 'function') {
				extraFunction(err, result);
			}
			//make it more visible for debugging: err=err && new Error(err.toString());
			callback(err, result);
		}
	}

	// NON-SPECIFIC METHODS AND PROPERTIES ====================================

	self.ping = function(indicator) {
		return indicator;
	}

	self.deleteAllForTest = function(callback) {
		if (self.databaseName.match(/test/i)) {
			modelHandle.find({}).remove(wrapCallback(callback));
		} else {
			callback({
				message: "deleting users is only allowed on test databases"
			});
		}

	}

	//METHODS AND PROPERTIES ====================================

	self.createList = function(list, callback) {
		callback = callback ? callback : printError;

		var newItem = new modelHandle(list);
		newItem.save(wrapCallback(callback));
	}

	self.getList = function(title, expectedFormat, callback) {

		var query = modelHandle.findOne({
			title: title
		});
		switch (expectedFormat){
			case 'lean':
			query.lean().exec(wrapCallback(callback));
			break;
			case 'fat':
			query.exec(wrapCallback(callback));
			break;
			default:
				callback('', new Error("expectedFormat must be wither 'lean' (plain javascript object) or 'fat' (mongoose object)"));
			break;
		}


	}

	self.addRecipient = function(listRecipient, callback) {

		modelHandle.update(
		{
			title: listRecipient.title
		},
		{
			$addToSet: {
				recipients: [
					{
						emailAdr: listRecipient.emailAdr
					}
				]
			}
		},
		wrapCallback(callback)

		);

	}

	//INITIALIZATION ====================================
	initDb();
	var modelHandle = dataModel();

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;














